{"version":3,"sources":["../../jsx/components/rich.jsx"],"names":[],"mappings":"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","file":"rich.js","sourcesContent":["'use strict';\n\nimport {\n  Editor,\n  EditorState,\n  RichUtils,\n  DefaultDraftBlockRenderMap,\n} from 'draft-js';\nimport React from 'react';\n\nclass RichEditorExample extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      editorState: EditorState.createEmpty(),\n    };\n\n    this.focus = () => this.refs.editor.focus();\n    this.onChange = (editorState) => {\n      this.setState({editorState});\n      console.log(editorState.getCurrentContent());\n    };\n\n    this.handleKeyCommand = (command) => this._handleKeyCommand(command);\n    this.toggleBlockType = (type) => this._toggleBlockType(type);\n    this.toggleInlineStyle = (style) => this._toggleInlineStyle(style);\n  }\n\n  _handleKeyCommand(command) {\n    const {editorState} = this.state;\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return true;\n    }\n    return false;\n  }\n\n  _toggleBlockType(blockType) {\n    this.onChange(\n      RichUtils.toggleBlockType(\n        this.state.editorState,\n        blockType\n      )\n    );\n  }\n\n  _toggleInlineStyle(inlineStyle) {\n    this.onChange(\n      RichUtils.toggleInlineStyle(\n        this.state.editorState,\n        inlineStyle\n      )\n    );\n  }\n\n  render() {\n    const {editorState} = this.state;\n\n    // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n    let className = 'RichEditor-editor';\n    var contentState = editorState.getCurrentContent();\n    if (!contentState.hasText()) {\n      if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n        className += ' RichEditor-hidePlaceholder';\n      }\n    }\n\n    return (\n      <div className=\"RichEditor-root\">\n        <BlockStyleControls\n          editorState={editorState}\n          onToggle={this.toggleBlockType}\n        />\n        <InlineStyleControls\n          editorState={editorState}\n          onToggle={this.toggleInlineStyle}\n        />\n        <div className={className} onClick={this.focus}>\n          <Editor\n            blockStyleFn={getBlockStyle}\n            customStyleMap={styleMap}\n            editorState={editorState}\n            handleKeyCommand={this.handleKeyCommand}\n            onChange={this.onChange}\n            placeholder=\"Tell a story...\"\n            ref=\"editor\"\n            spellCheck={true}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\n// Custom overrides for \"code\" style.\nconst styleMap = {\n  CODE: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2,\n  },\n};\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case 'blockquote': return 'RichEditor-blockquote';\n    default: return null;\n  }\n}\n\nclass StyleButton extends React.Component {\n  constructor() {\n    super();\n    this.onToggle = (e) => {\n      e.preventDefault();\n      this.props.onToggle(this.props.style);\n    };\n  }\n\n  render() {\n    let className = 'RichEditor-styleButton';\n    if (this.props.active) {\n      className += ' RichEditor-activeButton';\n    }\n\n    return (\n      <span className={className} onMouseDown={this.onToggle}>\n        {this.props.label}\n      </span>\n    );\n  }\n}\n\nconst BLOCK_TYPES = [\n  {label: 'H1', style: 'header-one'},\n  {label: 'H2', style: 'header-two'},\n  {label: 'H3', style: 'header-three'},\n  {label: 'H4', style: 'header-four'},\n  {label: 'H5', style: 'header-five'},\n  {label: 'H6', style: 'header-six'},\n  {label: 'Blockquote', style: 'blockquote'},\n  {label: 'UL', style: 'unordered-list-item'},\n  {label: 'OL', style: 'ordered-list-item'},\n  {label: 'Code Block', style: 'code-block'},\n];\n\nconst BlockStyleControls = (props) => {\n  const {editorState} = props;\n  const selection = editorState.getSelection();\n  const blockType = editorState\n    .getCurrentContent()\n    .getBlockForKey(selection.getStartKey())\n    .getType();\n\n  return (\n    <div className=\"RichEditor-controls\">\n      {BLOCK_TYPES.map((type) =>\n        <StyleButton\n          key={type.label}\n          active={type.style === blockType}\n          label={type.label}\n          onToggle={props.onToggle}\n          style={type.style}\n        />\n      )}\n    </div>\n  );\n};\n\nvar INLINE_STYLES = [\n  {label: 'Bold', style: 'BOLD'},\n  {label: 'Italic', style: 'ITALIC'},\n  {label: 'Underline', style: 'UNDERLINE'},\n  {label: 'Monospace', style: 'CODE'},\n];\n\nconst InlineStyleControls = (props) => {\n  var currentStyle = props.editorState.getCurrentInlineStyle();\n  return (\n    <div className=\"RichEditor-controls\">\n      {INLINE_STYLES.map(type =>\n        <StyleButton\n          key={type.label}\n          active={currentStyle.has(type.style)}\n          label={type.label}\n          onToggle={props.onToggle}\n          style={type.style}\n        />\n      )}\n    </div>\n  );\n};\n\n\n\n\nmodule.exports = RichEditorExample;\n"]}